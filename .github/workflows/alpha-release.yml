# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT

# alpha-release.yml - releasing CWA  artifacts for customers and will be safe to deleted after Alpha release etc.
name: Alpha Release
env:
  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}
  ECR_RELEASE_REPO: "ccwa-release"

on:
  release:
    types: [published]

jobs:
  UploadRelease:
    name: "UploadRelease"
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: us-west-2

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ~1.19.2

      - name: Cache go
        id: cached_go
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.sum') }}

      # Required to build rpm again to reset cw agent version to new tag version
      - name: Build RPM
        run: make build package-rpm

      - name: Check current release version against new version and ensure they are different
        run: |
          aws s3 cp s3://${S3_INTEGRATION_BUCKET}/release/CWAGENT_VERSION /tmp/
          current_val=`cat /tmp/CWAGENT_VERSION`
          new_val=`cat build/bin/CWAGENT_VERSION`
          if [ "$current_val" = "$new_val" ]; then
            echo "This version has already been published. Do nothing."
            exit 1
          fi

      - name: Copy RPM To Release
        run: |
          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${S3_INTEGRATION_BUCKET}/release/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          aws s3 cp build/bin/linux/arm64/amazon-cloudwatch-agent.rpm s3://${S3_INTEGRATION_BUCKET}/release/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm
          aws s3 cp build/bin/CWAGENT_VERSION s3://${S3_INTEGRATION_BUCKET}/release/CWAGENT_VERSION

      - name: Copy RPM To Tag
        run: |
          export tag=$(cat build/bin/CWAGENT_VERSION)
          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${S3_INTEGRATION_BUCKET}/release/${tag}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          aws s3 cp build/bin/linux/arm64/amazon-cloudwatch-agent.rpm s3://${S3_INTEGRATION_BUCKET}/release/${tag}/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm
          aws s3 cp build/bin/CWAGENT_VERSION s3://${S3_INTEGRATION_BUCKET}/release/${tag}/CWAGENT_VERSION

      - name: Login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

        # QEMU is an open-source machine emulator and virtualizer.
        # It allows users to build ARM CUDA binaries on their x86 machine without needing a cross-compiler.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Build dir is ignored in our .dockerignore thus need to copy to another dir.
      - name: Copy Binary For Agent Image Build
        run: cp -r build/bin/linux/* .

      # Documentation: https://github.com/docker/build-push-action
      - name: Build Cloudwatch Agent Image
        uses: docker/build-push-action@v2
        with:
          file: amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localdeb/Dockerfile
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_RELEASE_REPO }}:latest
          platforms: linux/amd64, linux/arm64

  # Assume we do not run 2 releases at the same time
  DeployCanary:
    needs: [UploadRelease]
    uses: ./.github/workflows/deploy-canary.yml
    secrets: inherit
