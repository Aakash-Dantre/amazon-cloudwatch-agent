// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package sdkmetricsdataplaneiface provides an interface to enable mocking the AWS SDK Metrics Dataplane service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package sdkmetricsdataplaneiface

import (
	"github.com/aws/amazon-cloudwatch-agent/awscsm/sdkmetricsdataplane"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

// SDKMetricsDataplaneAPI provides an interface to enable mocking the
// sdkmetricsdataplane.SDKMetricsDataplane service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // AWS SDK Metrics Dataplane.
//    func myFunc(svc sdkmetricsdataplaneiface.SDKMetricsDataplaneAPI) bool {
//        // Make svc.PutRecords request
//    }
//
//    func main() {
//        sess := session.New()
//        svc := sdkmetricsdataplane.New(sess)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockSDKMetricsDataplaneClient struct {
//        sdkmetricsdataplaneiface.SDKMetricsDataplaneAPI
//    }
//    func (m *mockSDKMetricsDataplaneClient) PutRecords(input *sdkmetricsdataplane.PutRecordsInput) (*sdkmetricsdataplane.PutRecordsOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockSDKMetricsDataplaneClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type SDKMetricsDataplaneAPI interface {
	PutRecords(*sdkmetricsdataplane.PutRecordsInput) (*sdkmetricsdataplane.PutRecordsOutput, error)
	PutRecordsWithContext(aws.Context, *sdkmetricsdataplane.PutRecordsInput, ...request.Option) (*sdkmetricsdataplane.PutRecordsOutput, error)
	PutRecordsRequest(*sdkmetricsdataplane.PutRecordsInput) (*request.Request, *sdkmetricsdataplane.PutRecordsOutput)
}

var _ SDKMetricsDataplaneAPI = (*sdkmetricsdataplane.SDKMetricsDataplane)(nil)
