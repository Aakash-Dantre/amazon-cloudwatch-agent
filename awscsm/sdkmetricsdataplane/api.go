// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT

// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package sdkmetricsdataplane

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opPutRecords = "PutRecords"

// PutRecordsRequest generates a "aws/request.Request" representing the
// client's request for the PutRecords operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See PutRecords for more information on using the PutRecords
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the PutRecordsRequest method.
//    req, resp := client.PutRecordsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/sdkmetrics-dataplane-2018-10-22/PutRecords
func (c *SDKMetricsDataplane) PutRecordsRequest(input *PutRecordsInput) (req *request.Request, output *PutRecordsOutput) {
	op := &request.Operation{
		Name:       opPutRecords,
		HTTPMethod: "POST",
		HTTPPath:   "/monitoring/v1/records",
	}

	if input == nil {
		input = &PutRecordsInput{}
	}

	output = &PutRecordsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// PutRecords API operation for AWS SDK Metrics Dataplane.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for AWS SDK Metrics Dataplane's
// API operation PutRecords for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/sdkmetrics-dataplane-2018-10-22/PutRecords
func (c *SDKMetricsDataplane) PutRecords(input *PutRecordsInput) (*PutRecordsOutput, error) {
	req, out := c.PutRecordsRequest(input)
	return out, req.Send()
}

// PutRecordsWithContext is the same as PutRecords with the addition of
// the ability to pass a context and additional request options.
//
// See PutRecords for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SDKMetricsDataplane) PutRecordsWithContext(ctx aws.Context, input *PutRecordsInput, opts ...request.Option) (*PutRecordsOutput, error) {
	req, out := c.PutRecordsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnvironmentProperty struct {
	_ struct{} `type:"structure"`

	// EnvironmentPropertyTag is a required field
	EnvironmentPropertyTag *string `type:"string" required:"true" enum:"EnvironmentPropertyTag"`
}

// String returns the string representation
func (s EnvironmentProperty) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnvironmentProperty) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnvironmentProperty) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnvironmentProperty"}
	if s.EnvironmentPropertyTag == nil {
		invalidParams.Add(request.NewErrParamRequired("EnvironmentPropertyTag"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEnvironmentPropertyTag sets the EnvironmentPropertyTag field's value.
func (s *EnvironmentProperty) SetEnvironmentPropertyTag(v string) *EnvironmentProperty {
	s.EnvironmentPropertyTag = &v
	return s
}

type FrequencyDistributionEntry struct {
	_ struct{} `type:"structure"`

	// Count is a required field
	Count *int64 `locationName:"count" type:"integer" required:"true"`

	Key *string `locationName:"key" type:"string"`
}

// String returns the string representation
func (s FrequencyDistributionEntry) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s FrequencyDistributionEntry) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *FrequencyDistributionEntry) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "FrequencyDistributionEntry"}
	if s.Count == nil {
		invalidParams.Add(request.NewErrParamRequired("Count"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCount sets the Count field's value.
func (s *FrequencyDistributionEntry) SetCount(v int64) *FrequencyDistributionEntry {
	s.Count = &v
	return s
}

// SetKey sets the Key field's value.
func (s *FrequencyDistributionEntry) SetKey(v string) *FrequencyDistributionEntry {
	s.Key = &v
	return s
}

type FrequencyMetric struct {
	_ struct{} `type:"structure"`

	// Distribution is a required field
	Distribution []*FrequencyDistributionEntry `locationName:"distribution" type:"list" required:"true"`

	// Name is a required field
	Name *string `locationName:"name" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s FrequencyMetric) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s FrequencyMetric) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *FrequencyMetric) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "FrequencyMetric"}
	if s.Distribution == nil {
		invalidParams.Add(request.NewErrParamRequired("Distribution"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Name", 1))
	}
	if s.Distribution != nil {
		for i, v := range s.Distribution {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Distribution", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDistribution sets the Distribution field's value.
func (s *FrequencyMetric) SetDistribution(v []*FrequencyDistributionEntry) *FrequencyMetric {
	s.Distribution = v
	return s
}

// SetName sets the Name field's value.
func (s *FrequencyMetric) SetName(v string) *FrequencyMetric {
	s.Name = &v
	return s
}

type HostEnvironment struct {
	_ struct{} `type:"structure"`

	AvailabilityZone *string `locationName:"availabilityZone" type:"string"`

	InstanceId *string `locationName:"instanceId" type:"string"`

	// Os is a required field
	Os *string `locationName:"os" type:"string" required:"true"`

	Properties []*EnvironmentProperty `locationName:"properties" type:"list"`

	SourceIps []*string `locationName:"sourceIps" type:"list"`

	VpcId *string `locationName:"vpcId" type:"string"`
}

// String returns the string representation
func (s HostEnvironment) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s HostEnvironment) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *HostEnvironment) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "HostEnvironment"}
	if s.Os == nil {
		invalidParams.Add(request.NewErrParamRequired("Os"))
	}
	if s.Properties != nil {
		for i, v := range s.Properties {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Properties", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *HostEnvironment) SetAvailabilityZone(v string) *HostEnvironment {
	s.AvailabilityZone = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *HostEnvironment) SetInstanceId(v string) *HostEnvironment {
	s.InstanceId = &v
	return s
}

// SetOs sets the Os field's value.
func (s *HostEnvironment) SetOs(v string) *HostEnvironment {
	s.Os = &v
	return s
}

// SetProperties sets the Properties field's value.
func (s *HostEnvironment) SetProperties(v []*EnvironmentProperty) *HostEnvironment {
	s.Properties = v
	return s
}

// SetSourceIps sets the SourceIps field's value.
func (s *HostEnvironment) SetSourceIps(v []*string) *HostEnvironment {
	s.SourceIps = v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *HostEnvironment) SetVpcId(v string) *HostEnvironment {
	s.VpcId = &v
	return s
}

type PutRecordsInput struct {
	_ struct{} `type:"structure"`

	// Environment is a required field
	Environment *HostEnvironment `locationName:"environment" type:"structure" required:"true"`

	// SdkRecords is a required field
	SdkRecords []*SdkMonitoringRecord `locationName:"sdkRecords" type:"list" required:"true"`
}

// String returns the string representation
func (s PutRecordsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PutRecordsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PutRecordsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "PutRecordsInput"}
	if s.Environment == nil {
		invalidParams.Add(request.NewErrParamRequired("Environment"))
	}
	if s.SdkRecords == nil {
		invalidParams.Add(request.NewErrParamRequired("SdkRecords"))
	}
	if s.Environment != nil {
		if err := s.Environment.Validate(); err != nil {
			invalidParams.AddNested("Environment", err.(request.ErrInvalidParams))
		}
	}
	if s.SdkRecords != nil {
		for i, v := range s.SdkRecords {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "SdkRecords", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEnvironment sets the Environment field's value.
func (s *PutRecordsInput) SetEnvironment(v *HostEnvironment) *PutRecordsInput {
	s.Environment = v
	return s
}

// SetSdkRecords sets the SdkRecords field's value.
func (s *PutRecordsInput) SetSdkRecords(v []*SdkMonitoringRecord) *PutRecordsInput {
	s.SdkRecords = v
	return s
}

type PutRecordsOutput struct {
	_ struct{} `type:"structure"`

	Statuses []*RecordStatus `locationName:"statuses" type:"list"`
}

// String returns the string representation
func (s PutRecordsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PutRecordsOutput) GoString() string {
	return s.String()
}

// SetStatuses sets the Statuses field's value.
func (s *PutRecordsOutput) SetStatuses(v []*RecordStatus) *PutRecordsOutput {
	s.Statuses = v
	return s
}

type RecordStatus struct {
	_ struct{} `type:"structure"`

	Error *string `locationName:"error" type:"string"`

	// Status is a required field
	Status *string `locationName:"status" type:"string" required:"true" enum:"Status"`
}

// String returns the string representation
func (s RecordStatus) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RecordStatus) GoString() string {
	return s.String()
}

// SetError sets the Error field's value.
func (s *RecordStatus) SetError(v string) *RecordStatus {
	s.Error = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *RecordStatus) SetStatus(v string) *RecordStatus {
	s.Status = &v
	return s
}

type SdkAggregationKey struct {
	_ struct{} `type:"structure"`

	Keys []*SdkAggregationKeyEntry `locationName:"keys" type:"list"`

	// Timestamp is a required field
	Timestamp *time.Time `locationName:"timestamp" type:"timestamp" timestampFormat:"unixTimestamp" required:"true"`
}

// String returns the string representation
func (s SdkAggregationKey) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SdkAggregationKey) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SdkAggregationKey) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SdkAggregationKey"}
	if s.Timestamp == nil {
		invalidParams.Add(request.NewErrParamRequired("Timestamp"))
	}
	if s.Keys != nil {
		for i, v := range s.Keys {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Keys", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetKeys sets the Keys field's value.
func (s *SdkAggregationKey) SetKeys(v []*SdkAggregationKeyEntry) *SdkAggregationKey {
	s.Keys = v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *SdkAggregationKey) SetTimestamp(v time.Time) *SdkAggregationKey {
	s.Timestamp = &v
	return s
}

type SdkAggregationKeyEntry struct {
	_ struct{} `type:"structure"`

	// Key is a required field
	Key *string `locationName:"key" min:"1" type:"string" required:"true"`

	// Value is a required field
	Value *string `locationName:"value" type:"string" required:"true"`
}

// String returns the string representation
func (s SdkAggregationKeyEntry) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SdkAggregationKeyEntry) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SdkAggregationKeyEntry) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SdkAggregationKeyEntry"}
	if s.Key == nil {
		invalidParams.Add(request.NewErrParamRequired("Key"))
	}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Key", 1))
	}
	if s.Value == nil {
		invalidParams.Add(request.NewErrParamRequired("Value"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetKey sets the Key field's value.
func (s *SdkAggregationKeyEntry) SetKey(v string) *SdkAggregationKeyEntry {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *SdkAggregationKeyEntry) SetValue(v string) *SdkAggregationKeyEntry {
	s.Value = &v
	return s
}

type SdkMonitoringRecord struct {
	_ struct{} `type:"structure"`

	// AggregationKey is a required field
	AggregationKey *SdkAggregationKey `locationName:"aggregationKey" type:"structure" required:"true"`

	CompressedEventSamples *string `locationName:"compressedEventSamples" type:"string"`

	FrequencyMetrics []*FrequencyMetric `locationName:"frequencyMetrics" type:"list"`

	// Id is a required field
	Id *string `locationName:"id" type:"string" required:"true"`

	SehMetrics []*SehMetric `locationName:"sehMetrics" type:"list"`

	UncompressedSamplesChecksum *int64 `locationName:"uncompressedSamplesChecksum" type:"long"`

	UncompressedSamplesLength *int64 `locationName:"uncompressedSamplesLength" min:"1" type:"integer"`

	// Version is a required field
	Version *string `locationName:"version" type:"string" required:"true"`
}

// String returns the string representation
func (s SdkMonitoringRecord) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SdkMonitoringRecord) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SdkMonitoringRecord) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SdkMonitoringRecord"}
	if s.AggregationKey == nil {
		invalidParams.Add(request.NewErrParamRequired("AggregationKey"))
	}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.UncompressedSamplesLength != nil && *s.UncompressedSamplesLength < 1 {
		invalidParams.Add(request.NewErrParamMinValue("UncompressedSamplesLength", 1))
	}
	if s.Version == nil {
		invalidParams.Add(request.NewErrParamRequired("Version"))
	}
	if s.AggregationKey != nil {
		if err := s.AggregationKey.Validate(); err != nil {
			invalidParams.AddNested("AggregationKey", err.(request.ErrInvalidParams))
		}
	}
	if s.FrequencyMetrics != nil {
		for i, v := range s.FrequencyMetrics {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "FrequencyMetrics", i), err.(request.ErrInvalidParams))
			}
		}
	}
	if s.SehMetrics != nil {
		for i, v := range s.SehMetrics {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "SehMetrics", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAggregationKey sets the AggregationKey field's value.
func (s *SdkMonitoringRecord) SetAggregationKey(v *SdkAggregationKey) *SdkMonitoringRecord {
	s.AggregationKey = v
	return s
}

// SetCompressedEventSamples sets the CompressedEventSamples field's value.
func (s *SdkMonitoringRecord) SetCompressedEventSamples(v string) *SdkMonitoringRecord {
	s.CompressedEventSamples = &v
	return s
}

// SetFrequencyMetrics sets the FrequencyMetrics field's value.
func (s *SdkMonitoringRecord) SetFrequencyMetrics(v []*FrequencyMetric) *SdkMonitoringRecord {
	s.FrequencyMetrics = v
	return s
}

// SetId sets the Id field's value.
func (s *SdkMonitoringRecord) SetId(v string) *SdkMonitoringRecord {
	s.Id = &v
	return s
}

// SetSehMetrics sets the SehMetrics field's value.
func (s *SdkMonitoringRecord) SetSehMetrics(v []*SehMetric) *SdkMonitoringRecord {
	s.SehMetrics = v
	return s
}

// SetUncompressedSamplesChecksum sets the UncompressedSamplesChecksum field's value.
func (s *SdkMonitoringRecord) SetUncompressedSamplesChecksum(v int64) *SdkMonitoringRecord {
	s.UncompressedSamplesChecksum = &v
	return s
}

// SetUncompressedSamplesLength sets the UncompressedSamplesLength field's value.
func (s *SdkMonitoringRecord) SetUncompressedSamplesLength(v int64) *SdkMonitoringRecord {
	s.UncompressedSamplesLength = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *SdkMonitoringRecord) SetVersion(v string) *SdkMonitoringRecord {
	s.Version = &v
	return s
}

type SehBucket struct {
	_ struct{} `type:"structure"`

	// Index is a required field
	Index *int64 `locationName:"index" type:"long" required:"true"`

	// Value is a required field
	Value *float64 `locationName:"value" type:"double" required:"true"`
}

// String returns the string representation
func (s SehBucket) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SehBucket) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SehBucket) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SehBucket"}
	if s.Index == nil {
		invalidParams.Add(request.NewErrParamRequired("Index"))
	}
	if s.Value == nil {
		invalidParams.Add(request.NewErrParamRequired("Value"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetIndex sets the Index field's value.
func (s *SehBucket) SetIndex(v int64) *SehBucket {
	s.Index = &v
	return s
}

// SetValue sets the Value field's value.
func (s *SehBucket) SetValue(v float64) *SehBucket {
	s.Value = &v
	return s
}

type SehMetric struct {
	_ struct{} `type:"structure"`

	// Name is a required field
	Name *string `locationName:"name" min:"1" type:"string" required:"true"`

	// SehBuckets is a required field
	SehBuckets []*SehBucket `locationName:"sehBuckets" type:"list" required:"true"`

	// Stats is a required field
	Stats *StatisticSet `locationName:"stats" type:"structure" required:"true"`
}

// String returns the string representation
func (s SehMetric) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SehMetric) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SehMetric) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SehMetric"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Name", 1))
	}
	if s.SehBuckets == nil {
		invalidParams.Add(request.NewErrParamRequired("SehBuckets"))
	}
	if s.Stats == nil {
		invalidParams.Add(request.NewErrParamRequired("Stats"))
	}
	if s.SehBuckets != nil {
		for i, v := range s.SehBuckets {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "SehBuckets", i), err.(request.ErrInvalidParams))
			}
		}
	}
	if s.Stats != nil {
		if err := s.Stats.Validate(); err != nil {
			invalidParams.AddNested("Stats", err.(request.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *SehMetric) SetName(v string) *SehMetric {
	s.Name = &v
	return s
}

// SetSehBuckets sets the SehBuckets field's value.
func (s *SehMetric) SetSehBuckets(v []*SehBucket) *SehMetric {
	s.SehBuckets = v
	return s
}

// SetStats sets the Stats field's value.
func (s *SehMetric) SetStats(v *StatisticSet) *SehMetric {
	s.Stats = v
	return s
}

type StatisticSet struct {
	_ struct{} `type:"structure"`

	// Count is a required field
	Count *float64 `locationName:"count" type:"double" required:"true"`

	// Max is a required field
	Max *float64 `locationName:"max" type:"double" required:"true"`

	// Min is a required field
	Min *float64 `locationName:"min" type:"double" required:"true"`

	// Sum is a required field
	Sum *float64 `locationName:"sum" type:"double" required:"true"`
}

// String returns the string representation
func (s StatisticSet) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s StatisticSet) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StatisticSet) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StatisticSet"}
	if s.Count == nil {
		invalidParams.Add(request.NewErrParamRequired("Count"))
	}
	if s.Max == nil {
		invalidParams.Add(request.NewErrParamRequired("Max"))
	}
	if s.Min == nil {
		invalidParams.Add(request.NewErrParamRequired("Min"))
	}
	if s.Sum == nil {
		invalidParams.Add(request.NewErrParamRequired("Sum"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCount sets the Count field's value.
func (s *StatisticSet) SetCount(v float64) *StatisticSet {
	s.Count = &v
	return s
}

// SetMax sets the Max field's value.
func (s *StatisticSet) SetMax(v float64) *StatisticSet {
	s.Max = &v
	return s
}

// SetMin sets the Min field's value.
func (s *StatisticSet) SetMin(v float64) *StatisticSet {
	s.Min = &v
	return s
}

// SetSum sets the Sum field's value.
func (s *StatisticSet) SetSum(v float64) *StatisticSet {
	s.Sum = &v
	return s
}

const (
	// EnvironmentPropertyTagEc2 is a EnvironmentPropertyTag enum value
	EnvironmentPropertyTagEc2 = "EC2"

	// EnvironmentPropertyTagLambda is a EnvironmentPropertyTag enum value
	EnvironmentPropertyTagLambda = "LAMBDA"
)

const (
	// StatusOk is a Status enum value
	StatusOk = "OK"

	// StatusError is a Status enum value
	StatusError = "ERROR"
)
