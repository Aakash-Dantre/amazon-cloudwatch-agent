// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT

// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package csmiface provides an interface to enable mocking the Amazon Client-Side Monitoring service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package csmiface

import (
	"github.com/aws/amazon-cloudwatch-agent/awscsm/csm"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

// CSMAPI provides an interface to enable mocking the
// csm.CSM service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Amazon Client-Side Monitoring.
//    func myFunc(svc csmiface.CSMAPI) bool {
//        // Make svc.GetPublishingConfiguration request
//    }
//
//    func main() {
//        sess := session.New()
//        svc := csm.New(sess)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockCSMClient struct {
//        csmiface.CSMAPI
//    }
//    func (m *mockCSMClient) GetPublishingConfiguration(input *csm.GetPublishingConfigurationInput) (*csm.GetPublishingConfigurationOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockCSMClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type CSMAPI interface {
	GetPublishingConfiguration(*csm.GetPublishingConfigurationInput) (*csm.GetPublishingConfigurationOutput, error)
	GetPublishingConfigurationWithContext(aws.Context, *csm.GetPublishingConfigurationInput, ...request.Option) (*csm.GetPublishingConfigurationOutput, error)
	GetPublishingConfigurationRequest(*csm.GetPublishingConfigurationInput) (*request.Request, *csm.GetPublishingConfigurationOutput)

	GetPublishingSchema(*csm.GetPublishingSchemaInput) (*csm.GetPublishingSchemaOutput, error)
	GetPublishingSchemaWithContext(aws.Context, *csm.GetPublishingSchemaInput, ...request.Option) (*csm.GetPublishingSchemaOutput, error)
	GetPublishingSchemaRequest(*csm.GetPublishingSchemaInput) (*request.Request, *csm.GetPublishingSchemaOutput)

	PutPublishingMetrics(*csm.PutPublishingMetricsInput) (*csm.PutPublishingMetricsOutput, error)
	PutPublishingMetricsWithContext(aws.Context, *csm.PutPublishingMetricsInput, ...request.Option) (*csm.PutPublishingMetricsOutput, error)
	PutPublishingMetricsRequest(*csm.PutPublishingMetricsInput) (*request.Request, *csm.PutPublishingMetricsOutput)
}

var _ CSMAPI = (*csm.CSM)(nil)
