// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package csm

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/private/protocol"
	"github.com/aws/aws-sdk-go/private/protocol/restjson"
)

const opGetPublishingConfiguration = "GetPublishingConfiguration"

// GetPublishingConfigurationRequest generates a "aws/request.Request" representing the
// client's request for the GetPublishingConfiguration operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetPublishingConfiguration for more information on using the GetPublishingConfiguration
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetPublishingConfigurationRequest method.
//    req, resp := client.GetPublishingConfigurationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/client-side-monitoring-2018-10-23/GetPublishingConfiguration
func (c *CSM) GetPublishingConfigurationRequest(input *GetPublishingConfigurationInput) (req *request.Request, output *GetPublishingConfigurationOutput) {
	op := &request.Operation{
		Name:       opGetPublishingConfiguration,
		HTTPMethod: "POST",
		HTTPPath:   "/control/v1/GetPublishingConfiguration",
	}

	if input == nil {
		input = &GetPublishingConfigurationInput{}
	}

	output = &GetPublishingConfigurationOutput{}
	req = c.newRequest(op, input, output)
	return
}

// GetPublishingConfiguration API operation for Amazon Client-Side Monitoring.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Amazon Client-Side Monitoring's
// API operation GetPublishingConfiguration for usage and error information.
//
// Returned Error Types:
//   * InternalServiceException
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/client-side-monitoring-2018-10-23/GetPublishingConfiguration
func (c *CSM) GetPublishingConfiguration(input *GetPublishingConfigurationInput) (*GetPublishingConfigurationOutput, error) {
	req, out := c.GetPublishingConfigurationRequest(input)
	return out, req.Send()
}

// GetPublishingConfigurationWithContext is the same as GetPublishingConfiguration with the addition of
// the ability to pass a context and additional request options.
//
// See GetPublishingConfiguration for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CSM) GetPublishingConfigurationWithContext(ctx aws.Context, input *GetPublishingConfigurationInput, opts ...request.Option) (*GetPublishingConfigurationOutput, error) {
	req, out := c.GetPublishingConfigurationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetPublishingSchema = "GetPublishingSchema"

// GetPublishingSchemaRequest generates a "aws/request.Request" representing the
// client's request for the GetPublishingSchema operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetPublishingSchema for more information on using the GetPublishingSchema
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetPublishingSchemaRequest method.
//    req, resp := client.GetPublishingSchemaRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/client-side-monitoring-2018-10-23/GetPublishingSchema
func (c *CSM) GetPublishingSchemaRequest(input *GetPublishingSchemaInput) (req *request.Request, output *GetPublishingSchemaOutput) {
	op := &request.Operation{
		Name:       opGetPublishingSchema,
		HTTPMethod: "POST",
		HTTPPath:   "/control/v1/GetPublishingSchema",
	}

	if input == nil {
		input = &GetPublishingSchemaInput{}
	}

	output = &GetPublishingSchemaOutput{}
	req = c.newRequest(op, input, output)
	return
}

// GetPublishingSchema API operation for Amazon Client-Side Monitoring.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Amazon Client-Side Monitoring's
// API operation GetPublishingSchema for usage and error information.
//
// Returned Error Types:
//   * InternalServiceException
//
//   * InvalidRequestException
//
//   * ResourceNotFoundException
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/client-side-monitoring-2018-10-23/GetPublishingSchema
func (c *CSM) GetPublishingSchema(input *GetPublishingSchemaInput) (*GetPublishingSchemaOutput, error) {
	req, out := c.GetPublishingSchemaRequest(input)
	return out, req.Send()
}

// GetPublishingSchemaWithContext is the same as GetPublishingSchema with the addition of
// the ability to pass a context and additional request options.
//
// See GetPublishingSchema for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CSM) GetPublishingSchemaWithContext(ctx aws.Context, input *GetPublishingSchemaInput, opts ...request.Option) (*GetPublishingSchemaOutput, error) {
	req, out := c.GetPublishingSchemaRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opPutPublishingMetrics = "PutPublishingMetrics"

// PutPublishingMetricsRequest generates a "aws/request.Request" representing the
// client's request for the PutPublishingMetrics operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See PutPublishingMetrics for more information on using the PutPublishingMetrics
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the PutPublishingMetricsRequest method.
//    req, resp := client.PutPublishingMetricsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/client-side-monitoring-2018-10-23/PutPublishingMetrics
func (c *CSM) PutPublishingMetricsRequest(input *PutPublishingMetricsInput) (req *request.Request, output *PutPublishingMetricsOutput) {
	op := &request.Operation{
		Name:       opPutPublishingMetrics,
		HTTPMethod: "POST",
		HTTPPath:   "/control/v1/PutPublishingMetrics",
	}

	if input == nil {
		input = &PutPublishingMetricsInput{}
	}

	output = &PutPublishingMetricsOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(restjson.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// PutPublishingMetrics API operation for Amazon Client-Side Monitoring.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Amazon Client-Side Monitoring's
// API operation PutPublishingMetrics for usage and error information.
//
// Returned Error Types:
//   * InvalidRequestException
//
//   * InternalServiceException
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/client-side-monitoring-2018-10-23/PutPublishingMetrics
func (c *CSM) PutPublishingMetrics(input *PutPublishingMetricsInput) (*PutPublishingMetricsOutput, error) {
	req, out := c.PutPublishingMetricsRequest(input)
	return out, req.Send()
}

// PutPublishingMetricsWithContext is the same as PutPublishingMetrics with the addition of
// the ability to pass a context and additional request options.
//
// See PutPublishingMetrics for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CSM) PutPublishingMetricsWithContext(ctx aws.Context, input *PutPublishingMetricsInput, opts ...request.Option) (*PutPublishingMetricsOutput, error) {
	req, out := c.PutPublishingMetricsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetPublishingConfigurationInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s GetPublishingConfigurationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetPublishingConfigurationInput) GoString() string {
	return s.String()
}

type GetPublishingConfigurationOutput struct {
	_ struct{} `type:"structure"`

	Endpoint *string `locationName:"endpoint" min:"1" type:"string"`

	QueryIntervalInMinutes *int64 `locationName:"queryIntervalInMinutes" min:"15" type:"integer"`

	SchemaVersion *string `locationName:"schemaVersion" type:"string"`

	Status *string `locationName:"status" type:"string" enum:"ClientPublishingStatusType"`
}

// String returns the string representation
func (s GetPublishingConfigurationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetPublishingConfigurationOutput) GoString() string {
	return s.String()
}

// SetEndpoint sets the Endpoint field's value.
func (s *GetPublishingConfigurationOutput) SetEndpoint(v string) *GetPublishingConfigurationOutput {
	s.Endpoint = &v
	return s
}

// SetQueryIntervalInMinutes sets the QueryIntervalInMinutes field's value.
func (s *GetPublishingConfigurationOutput) SetQueryIntervalInMinutes(v int64) *GetPublishingConfigurationOutput {
	s.QueryIntervalInMinutes = &v
	return s
}

// SetSchemaVersion sets the SchemaVersion field's value.
func (s *GetPublishingConfigurationOutput) SetSchemaVersion(v string) *GetPublishingConfigurationOutput {
	s.SchemaVersion = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *GetPublishingConfigurationOutput) SetStatus(v string) *GetPublishingConfigurationOutput {
	s.Status = &v
	return s
}

type GetPublishingSchemaInput struct {
	_ struct{} `type:"structure"`

	// SchemaVersion is a required field
	SchemaVersion *string `locationName:"schemaVersion" type:"string" required:"true"`
}

// String returns the string representation
func (s GetPublishingSchemaInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetPublishingSchemaInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetPublishingSchemaInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetPublishingSchemaInput"}
	if s.SchemaVersion == nil {
		invalidParams.Add(request.NewErrParamRequired("SchemaVersion"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSchemaVersion sets the SchemaVersion field's value.
func (s *GetPublishingSchemaInput) SetSchemaVersion(v string) *GetPublishingSchemaInput {
	s.SchemaVersion = &v
	return s
}

type GetPublishingSchemaOutput struct {
	_ struct{} `type:"structure"`

	MonitoringEventEntrySchemas []*MonitoringEventEntrySchema `locationName:"monitoringEventEntrySchemas" type:"list"`

	MonitoringEventSchemas []*MonitoringEventSchema `locationName:"monitoringEventSchemas" type:"list"`

	ServiceLimits *ServiceLimits `locationName:"serviceLimits" type:"structure"`
}

// String returns the string representation
func (s GetPublishingSchemaOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetPublishingSchemaOutput) GoString() string {
	return s.String()
}

// SetMonitoringEventEntrySchemas sets the MonitoringEventEntrySchemas field's value.
func (s *GetPublishingSchemaOutput) SetMonitoringEventEntrySchemas(v []*MonitoringEventEntrySchema) *GetPublishingSchemaOutput {
	s.MonitoringEventEntrySchemas = v
	return s
}

// SetMonitoringEventSchemas sets the MonitoringEventSchemas field's value.
func (s *GetPublishingSchemaOutput) SetMonitoringEventSchemas(v []*MonitoringEventSchema) *GetPublishingSchemaOutput {
	s.MonitoringEventSchemas = v
	return s
}

// SetServiceLimits sets the ServiceLimits field's value.
func (s *GetPublishingSchemaOutput) SetServiceLimits(v *ServiceLimits) *GetPublishingSchemaOutput {
	s.ServiceLimits = v
	return s
}

type HostEnvironment struct {
	_ struct{} `type:"structure"`

	AvailabilityZone *string `locationName:"availabilityZone" type:"string"`

	InstanceId *string `locationName:"instanceId" type:"string"`

	Os *string `locationName:"os" type:"string"`

	Properties []*string `locationName:"properties" type:"list"`

	VpcId *string `locationName:"vpcId" type:"string"`
}

// String returns the string representation
func (s HostEnvironment) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s HostEnvironment) GoString() string {
	return s.String()
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *HostEnvironment) SetAvailabilityZone(v string) *HostEnvironment {
	s.AvailabilityZone = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *HostEnvironment) SetInstanceId(v string) *HostEnvironment {
	s.InstanceId = &v
	return s
}

// SetOs sets the Os field's value.
func (s *HostEnvironment) SetOs(v string) *HostEnvironment {
	s.Os = &v
	return s
}

// SetProperties sets the Properties field's value.
func (s *HostEnvironment) SetProperties(v []*string) *HostEnvironment {
	s.Properties = v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *HostEnvironment) SetVpcId(v string) *HostEnvironment {
	s.VpcId = &v
	return s
}

type InternalServiceException struct {
	_            struct{}                  `type:"structure"`
	RespMetadata protocol.ResponseMetadata `json:"-" xml:"-"`

	Message_ *string `locationName:"Message" type:"string"`
}

// String returns the string representation
func (s InternalServiceException) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s InternalServiceException) GoString() string {
	return s.String()
}

func newErrorInternalServiceException(v protocol.ResponseMetadata) error {
	return &InternalServiceException{
		RespMetadata: v,
	}
}

// Code returns the exception type name.
func (s *InternalServiceException) Code() string {
	return "InternalServiceException"
}

// Message returns the exception's message.
func (s *InternalServiceException) Message() string {
	if s.Message_ != nil {
		return *s.Message_
	}
	return ""
}

// OrigErr always returns nil, satisfies awserr.Error interface.
func (s *InternalServiceException) OrigErr() error {
	return nil
}

func (s *InternalServiceException) Error() string {
	return fmt.Sprintf("%s: %s", s.Code(), s.Message())
}

// Status code returns the HTTP status code for the request's response error.
func (s *InternalServiceException) StatusCode() int {
	return s.RespMetadata.StatusCode
}

// RequestID returns the service's response RequestID for request.
func (s *InternalServiceException) RequestID() string {
	return s.RespMetadata.RequestID
}

type InvalidRequestException struct {
	_            struct{}                  `type:"structure"`
	RespMetadata protocol.ResponseMetadata `json:"-" xml:"-"`

	Message_ *string `locationName:"Message" type:"string"`
}

// String returns the string representation
func (s InvalidRequestException) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s InvalidRequestException) GoString() string {
	return s.String()
}

func newErrorInvalidRequestException(v protocol.ResponseMetadata) error {
	return &InvalidRequestException{
		RespMetadata: v,
	}
}

// Code returns the exception type name.
func (s *InvalidRequestException) Code() string {
	return "InvalidRequestException"
}

// Message returns the exception's message.
func (s *InvalidRequestException) Message() string {
	if s.Message_ != nil {
		return *s.Message_
	}
	return ""
}

// OrigErr always returns nil, satisfies awserr.Error interface.
func (s *InvalidRequestException) OrigErr() error {
	return nil
}

func (s *InvalidRequestException) Error() string {
	return fmt.Sprintf("%s: %s", s.Code(), s.Message())
}

// Status code returns the HTTP status code for the request's response error.
func (s *InvalidRequestException) StatusCode() int {
	return s.RespMetadata.StatusCode
}

// RequestID returns the service's response RequestID for request.
func (s *InvalidRequestException) RequestID() string {
	return s.RespMetadata.RequestID
}

type MonitoringEventEntrySchema struct {
	_ struct{} `type:"structure"`

	KeyType *string `locationName:"keyType" type:"string" enum:"MonitoringEventEntryKeyType"`

	MetricType *string `locationName:"metricType" type:"string" enum:"MonitoringEventEntryMetricType"`

	Name *string `locationName:"name" type:"string"`
}

// String returns the string representation
func (s MonitoringEventEntrySchema) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s MonitoringEventEntrySchema) GoString() string {
	return s.String()
}

// SetKeyType sets the KeyType field's value.
func (s *MonitoringEventEntrySchema) SetKeyType(v string) *MonitoringEventEntrySchema {
	s.KeyType = &v
	return s
}

// SetMetricType sets the MetricType field's value.
func (s *MonitoringEventEntrySchema) SetMetricType(v string) *MonitoringEventEntrySchema {
	s.MetricType = &v
	return s
}

// SetName sets the Name field's value.
func (s *MonitoringEventEntrySchema) SetName(v string) *MonitoringEventEntrySchema {
	s.Name = &v
	return s
}

type MonitoringEventSchema struct {
	_ struct{} `type:"structure"`

	MaxSampleCount *int64 `locationName:"maxSampleCount" type:"integer"`

	Name *string `locationName:"name" type:"string"`

	SampleRate *float64 `locationName:"sampleRate" type:"double"`
}

// String returns the string representation
func (s MonitoringEventSchema) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s MonitoringEventSchema) GoString() string {
	return s.String()
}

// SetMaxSampleCount sets the MaxSampleCount field's value.
func (s *MonitoringEventSchema) SetMaxSampleCount(v int64) *MonitoringEventSchema {
	s.MaxSampleCount = &v
	return s
}

// SetName sets the Name field's value.
func (s *MonitoringEventSchema) SetName(v string) *MonitoringEventSchema {
	s.Name = &v
	return s
}

// SetSampleRate sets the SampleRate field's value.
func (s *MonitoringEventSchema) SetSampleRate(v float64) *MonitoringEventSchema {
	s.SampleRate = &v
	return s
}

type PublishingMetric struct {
	_ struct{} `type:"structure"`

	// Endpoint is a required field
	Endpoint *string `locationName:"endpoint" min:"1" type:"string" required:"true"`

	// Name is a required field
	Name *string `locationName:"name" min:"1" type:"string" required:"true"`

	// StatisticSet is a required field
	StatisticSet *StatisticSet `locationName:"statisticSet" type:"structure" required:"true"`

	// Timestamp is a required field
	Timestamp *time.Time `locationName:"timestamp" type:"timestamp" required:"true"`
}

// String returns the string representation
func (s PublishingMetric) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PublishingMetric) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PublishingMetric) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "PublishingMetric"}
	if s.Endpoint == nil {
		invalidParams.Add(request.NewErrParamRequired("Endpoint"))
	}
	if s.Endpoint != nil && len(*s.Endpoint) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Endpoint", 1))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Name", 1))
	}
	if s.StatisticSet == nil {
		invalidParams.Add(request.NewErrParamRequired("StatisticSet"))
	}
	if s.Timestamp == nil {
		invalidParams.Add(request.NewErrParamRequired("Timestamp"))
	}
	if s.StatisticSet != nil {
		if err := s.StatisticSet.Validate(); err != nil {
			invalidParams.AddNested("StatisticSet", err.(request.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndpoint sets the Endpoint field's value.
func (s *PublishingMetric) SetEndpoint(v string) *PublishingMetric {
	s.Endpoint = &v
	return s
}

// SetName sets the Name field's value.
func (s *PublishingMetric) SetName(v string) *PublishingMetric {
	s.Name = &v
	return s
}

// SetStatisticSet sets the StatisticSet field's value.
func (s *PublishingMetric) SetStatisticSet(v *StatisticSet) *PublishingMetric {
	s.StatisticSet = v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *PublishingMetric) SetTimestamp(v time.Time) *PublishingMetric {
	s.Timestamp = &v
	return s
}

type PutPublishingMetricsInput struct {
	_ struct{} `type:"structure"`

	// HostEnvironment is a required field
	HostEnvironment *HostEnvironment `locationName:"hostEnvironment" type:"structure" required:"true"`

	// Metrics is a required field
	Metrics []*PublishingMetric `locationName:"metrics" type:"list" required:"true"`
}

// String returns the string representation
func (s PutPublishingMetricsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PutPublishingMetricsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PutPublishingMetricsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "PutPublishingMetricsInput"}
	if s.HostEnvironment == nil {
		invalidParams.Add(request.NewErrParamRequired("HostEnvironment"))
	}
	if s.Metrics == nil {
		invalidParams.Add(request.NewErrParamRequired("Metrics"))
	}
	if s.Metrics != nil {
		for i, v := range s.Metrics {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Metrics", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetHostEnvironment sets the HostEnvironment field's value.
func (s *PutPublishingMetricsInput) SetHostEnvironment(v *HostEnvironment) *PutPublishingMetricsInput {
	s.HostEnvironment = v
	return s
}

// SetMetrics sets the Metrics field's value.
func (s *PutPublishingMetricsInput) SetMetrics(v []*PublishingMetric) *PutPublishingMetricsInput {
	s.Metrics = v
	return s
}

type PutPublishingMetricsOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s PutPublishingMetricsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PutPublishingMetricsOutput) GoString() string {
	return s.String()
}

type ResourceNotFoundException struct {
	_            struct{}                  `type:"structure"`
	RespMetadata protocol.ResponseMetadata `json:"-" xml:"-"`

	Message_ *string `locationName:"Message" type:"string"`
}

// String returns the string representation
func (s ResourceNotFoundException) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceNotFoundException) GoString() string {
	return s.String()
}

func newErrorResourceNotFoundException(v protocol.ResponseMetadata) error {
	return &ResourceNotFoundException{
		RespMetadata: v,
	}
}

// Code returns the exception type name.
func (s *ResourceNotFoundException) Code() string {
	return "ResourceNotFoundException"
}

// Message returns the exception's message.
func (s *ResourceNotFoundException) Message() string {
	if s.Message_ != nil {
		return *s.Message_
	}
	return ""
}

// OrigErr always returns nil, satisfies awserr.Error interface.
func (s *ResourceNotFoundException) OrigErr() error {
	return nil
}

func (s *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", s.Code(), s.Message())
}

// Status code returns the HTTP status code for the request's response error.
func (s *ResourceNotFoundException) StatusCode() int {
	return s.RespMetadata.StatusCode
}

// RequestID returns the service's response RequestID for request.
func (s *ResourceNotFoundException) RequestID() string {
	return s.RespMetadata.RequestID
}

type ServiceLimits struct {
	_ struct{} `type:"structure"`

	CompressedEventSamplesSizeLimit *int64 `locationName:"compressedEventSamplesSizeLimit" type:"integer"`

	FrequencyDistributionEntryKeySizeLimit *int64 `locationName:"frequencyDistributionEntryKeySizeLimit" type:"integer"`

	FrequencyMetricDistributionSizeLimit *int64 `locationName:"frequencyMetricDistributionSizeLimit" type:"integer"`

	PublishingMetricsLimit *int64 `locationName:"publishingMetricsLimit" type:"integer"`

	SdkAggregationKeyEntryValueSizeLimit *int64 `locationName:"sdkAggregationKeyEntryValueSizeLimit" type:"integer"`

	SdkMonitoringRecordsLimit *int64 `locationName:"sdkMonitoringRecordsLimit" type:"integer"`

	SehBucketLimit *int64 `locationName:"sehBucketLimit" type:"integer"`

	UncompressedSamplesLengthLimit *int64 `locationName:"uncompressedSamplesLengthLimit" type:"integer"`
}

// String returns the string representation
func (s ServiceLimits) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ServiceLimits) GoString() string {
	return s.String()
}

// SetCompressedEventSamplesSizeLimit sets the CompressedEventSamplesSizeLimit field's value.
func (s *ServiceLimits) SetCompressedEventSamplesSizeLimit(v int64) *ServiceLimits {
	s.CompressedEventSamplesSizeLimit = &v
	return s
}

// SetFrequencyDistributionEntryKeySizeLimit sets the FrequencyDistributionEntryKeySizeLimit field's value.
func (s *ServiceLimits) SetFrequencyDistributionEntryKeySizeLimit(v int64) *ServiceLimits {
	s.FrequencyDistributionEntryKeySizeLimit = &v
	return s
}

// SetFrequencyMetricDistributionSizeLimit sets the FrequencyMetricDistributionSizeLimit field's value.
func (s *ServiceLimits) SetFrequencyMetricDistributionSizeLimit(v int64) *ServiceLimits {
	s.FrequencyMetricDistributionSizeLimit = &v
	return s
}

// SetPublishingMetricsLimit sets the PublishingMetricsLimit field's value.
func (s *ServiceLimits) SetPublishingMetricsLimit(v int64) *ServiceLimits {
	s.PublishingMetricsLimit = &v
	return s
}

// SetSdkAggregationKeyEntryValueSizeLimit sets the SdkAggregationKeyEntryValueSizeLimit field's value.
func (s *ServiceLimits) SetSdkAggregationKeyEntryValueSizeLimit(v int64) *ServiceLimits {
	s.SdkAggregationKeyEntryValueSizeLimit = &v
	return s
}

// SetSdkMonitoringRecordsLimit sets the SdkMonitoringRecordsLimit field's value.
func (s *ServiceLimits) SetSdkMonitoringRecordsLimit(v int64) *ServiceLimits {
	s.SdkMonitoringRecordsLimit = &v
	return s
}

// SetSehBucketLimit sets the SehBucketLimit field's value.
func (s *ServiceLimits) SetSehBucketLimit(v int64) *ServiceLimits {
	s.SehBucketLimit = &v
	return s
}

// SetUncompressedSamplesLengthLimit sets the UncompressedSamplesLengthLimit field's value.
func (s *ServiceLimits) SetUncompressedSamplesLengthLimit(v int64) *ServiceLimits {
	s.UncompressedSamplesLengthLimit = &v
	return s
}

type StatisticSet struct {
	_ struct{} `type:"structure"`

	// Maximum is a required field
	Maximum *float64 `locationName:"maximum" type:"double" required:"true"`

	// Minimum is a required field
	Minimum *float64 `locationName:"minimum" type:"double" required:"true"`

	// SampleCount is a required field
	SampleCount *float64 `locationName:"sampleCount" type:"double" required:"true"`

	// Sum is a required field
	Sum *float64 `locationName:"sum" type:"double" required:"true"`
}

// String returns the string representation
func (s StatisticSet) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s StatisticSet) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StatisticSet) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StatisticSet"}
	if s.Maximum == nil {
		invalidParams.Add(request.NewErrParamRequired("Maximum"))
	}
	if s.Minimum == nil {
		invalidParams.Add(request.NewErrParamRequired("Minimum"))
	}
	if s.SampleCount == nil {
		invalidParams.Add(request.NewErrParamRequired("SampleCount"))
	}
	if s.Sum == nil {
		invalidParams.Add(request.NewErrParamRequired("Sum"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetMaximum sets the Maximum field's value.
func (s *StatisticSet) SetMaximum(v float64) *StatisticSet {
	s.Maximum = &v
	return s
}

// SetMinimum sets the Minimum field's value.
func (s *StatisticSet) SetMinimum(v float64) *StatisticSet {
	s.Minimum = &v
	return s
}

// SetSampleCount sets the SampleCount field's value.
func (s *StatisticSet) SetSampleCount(v float64) *StatisticSet {
	s.SampleCount = &v
	return s
}

// SetSum sets the Sum field's value.
func (s *StatisticSet) SetSum(v float64) *StatisticSet {
	s.Sum = &v
	return s
}

const (
	// ClientPublishingStatusTypeReady is a ClientPublishingStatusType enum value
	ClientPublishingStatusTypeReady = "READY"

	// ClientPublishingStatusTypePaused is a ClientPublishingStatusType enum value
	ClientPublishingStatusTypePaused = "PAUSED"

	// ClientPublishingStatusTypeSuspended is a ClientPublishingStatusType enum value
	ClientPublishingStatusTypeSuspended = "SUSPENDED"

	// ClientPublishingStatusTypeTerminated is a ClientPublishingStatusType enum value
	ClientPublishingStatusTypeTerminated = "TERMINATED"
)

const (
	// EnvironmentPropertyTypeEc2 is a EnvironmentPropertyType enum value
	EnvironmentPropertyTypeEc2 = "EC2"

	// EnvironmentPropertyTypeLambda is a EnvironmentPropertyType enum value
	EnvironmentPropertyTypeLambda = "LAMBDA"
)

const (
	// MonitoringEventEntryKeyTypeNone is a MonitoringEventEntryKeyType enum value
	MonitoringEventEntryKeyTypeNone = "NONE"

	// MonitoringEventEntryKeyTypeAggregation is a MonitoringEventEntryKeyType enum value
	MonitoringEventEntryKeyTypeAggregation = "AGGREGATION"

	// MonitoringEventEntryKeyTypeAggregationTimestamp is a MonitoringEventEntryKeyType enum value
	MonitoringEventEntryKeyTypeAggregationTimestamp = "AGGREGATION_TIMESTAMP"

	// MonitoringEventEntryKeyTypeSample is a MonitoringEventEntryKeyType enum value
	MonitoringEventEntryKeyTypeSample = "SAMPLE"
)

const (
	// MonitoringEventEntryMetricTypeNone is a MonitoringEventEntryMetricType enum value
	MonitoringEventEntryMetricTypeNone = "NONE"

	// MonitoringEventEntryMetricTypeFrequency is a MonitoringEventEntryMetricType enum value
	MonitoringEventEntryMetricTypeFrequency = "FREQUENCY"

	// MonitoringEventEntryMetricTypeSeh is a MonitoringEventEntryMetricType enum value
	MonitoringEventEntryMetricTypeSeh = "SEH"
)
